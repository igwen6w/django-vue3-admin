"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# crypto 对称加密
# key 44 位 base64 字符
AES_KEY = os.getenv('AES_KEY')
AES_SALT = os.getenv('AES_SALT')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

# 演示环境配置
DEMO_MODE = os.getenv('DEMO_MODE', 'False').lower() in ('true', '1')

ALLOWED_HOSTS = [
    '*',
]
INTERNAL_IPS = [
    '*',
]

CORS_ORIGIN_ALLOW_ALL = True  # 允许跨域名访问
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS =True

# Application definition

INSTALLED_APPS = [
    "simpleui",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    'django_filters',
    'corsheaders',
    'rest_framework.authtoken',
    # 'channels',
    "system",
    "ai",
    "work_order",
    "external_platform",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 演示环境中间件 - 全局禁止修改和删除操作
if DEMO_MODE:
    MIDDLEWARE.append('utils.middleware.DemoModeMiddleware')

AUTH_USER_MODEL = 'system.User'
ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME', 'django_vue'),
        'USER': os.getenv('DB_USER', 'chenze'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'my-secret-pw'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

# 设置为中国标准时间（CST，东八区）
TIME_ZONE = 'Asia/Shanghai'

# 启用国际化（多语言）
USE_I18N = True

# 启用本地化（格式化日期、数字等）
USE_L10N = True

# 是否使用时区支持（建议开启）
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  #自己在根目录下创建media文件夹
# Default primary key field type
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.CustomPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework.filters.OrderingFilter',
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'utils.authentication.BearerTokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}

# ================= Redis 缓存配置 =================
# 构建 Redis URL，支持有密码和无密码的情况
def build_redis_url(db=0):
    redis_host = os.environ.get('REDIS_HOST', 'localhost')
    redis_port = os.environ.get('REDIS_PORT', 6379)
    redis_password = os.environ.get('REDIS_PASSWORD', '')
    
    if redis_password:
        return f"redis://:{redis_password}@{redis_host}:{redis_port}/{db}"
    else:
        return f"redis://{redis_host}:{redis_port}/{db}"

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": build_redis_url(1),  # 使用数据库1作为缓存
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# SESSION 存 Redis
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# ================= Celery 配置（适配环境变量） =================
CELERY_BROKER_URL = build_redis_url(0)  # 使用数据库0作为消息队列
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
# 时区设置
CELERY_TIMEZONE = 'Asia/Shanghai'
# 任务序列化方式
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']

CELERY_BEAT_SCHEDULE = {
    'every-1-minutes': {
        'task': 'system.tasks.sync_temu_order',  # 任务路径
        'schedule': 60,  # 每1分钟执行一次
    },
    # 外部平台认证状态维护任务 - 每10分钟执行一次
    'maintain-auth-status': {
        'task': 'external_platform.tasks.maintain_auth_status_task',
        'schedule': 600,  # 每10分钟执行一次
        'options': {
            'expires': 300,  # 任务过期时间5分钟
        }
    },
    # 清理过期会话任务 - 每小时执行一次
    'cleanup-expired-sessions': {
        'task': 'external_platform.tasks.maintain_auth_status_task',
        'schedule': 3600,  # 每小时执行一次
        'options': {
            'expires': 1800,  # 任务过期时间30分钟
        }
    },
    'batch_fetch_workorders': {
        'task': 'external_platform.tasks.batch_fetch_workorders_task',
        'schedule': 300,  # 每 5 分钟执行一次
        'options': {
            'expires': 1800,  # 任务过期时间30分钟
        }
    }
}
# celery 配置结束

# ================= 外部平台配置 =================
# 超级鹰验证码配置
CHAOJIYING_CONFIG = {
    'username': os.getenv('CHAOJIYING_USERNAME', ''),
    'password': os.getenv('CHAOJIYING_PASSWORD', ''),
    'software_id': os.getenv('CHAOJIYING_SOFTWARE_ID', ''),
    'timeout': 30
}

# 外部平台配置现在从数据库读取，无需静态配置

# 外部平台任务配置
EXTERNAL_PLATFORM_TASK_CONFIG = {
    'login_task': {
        'max_retries': 3,
        'retry_delay': 60,  # 重试延迟(秒)
        'timeout': 300  # 任务超时时间(秒)
    },
    'maintain_auth_status': {
        'check_interval_minutes': 10,  # 检查间隔(分钟)
        'refresh_before_hours': 2,  # 过期前多少小时刷新
        'batch_size': 50  # 批处理大小
    }
}



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'ignore_auth_user': {
            '()': 'utils.filters_logs.IgnoreSQLFilter',
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'filters': ['ignore_auth_user'],
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG',   # 只在 DEBUG 模式时生效
        },
    }
}

ASGI_APPLICATION = 'backend.asgi.application'


# 简单用内存通道层
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels.layers.InMemoryChannelLayer'
#     }
# }

if os.path.exists(os.path.join(BASE_DIR, 'backend/local_settings.py')):
    from backend.local_settings import *